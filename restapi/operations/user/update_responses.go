// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/DmitryKuzmenec/crudLight/models"
)

// UpdateOKCode is the HTTP code returned for type UpdateOK
const UpdateOKCode int = 200

/*UpdateOK OK

swagger:response updateOK
*/
type UpdateOK struct {
}

// NewUpdateOK creates UpdateOK with default headers values
func NewUpdateOK() *UpdateOK {

	return &UpdateOK{}
}

// WriteResponse to the client
func (o *UpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateInternalServerErrorCode is the HTTP code returned for type UpdateInternalServerError
const UpdateInternalServerErrorCode int = 500

/*UpdateInternalServerError Server error

swagger:response updateInternalServerError
*/
type UpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateInternalServerError creates UpdateInternalServerError with default headers values
func NewUpdateInternalServerError() *UpdateInternalServerError {

	return &UpdateInternalServerError{}
}

// WithPayload adds the payload to the update internal server error response
func (o *UpdateInternalServerError) WithPayload(payload *models.Error) *UpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update internal server error response
func (o *UpdateInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
